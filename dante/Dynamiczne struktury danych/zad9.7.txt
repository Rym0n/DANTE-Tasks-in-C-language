Lista jednokierunkowa
Napisz program, który pozwoli użytkownikowi na wykonywanie podstawowych operacji na liście jednokierunkowej. W tym celu przygotuj struktury i zaimplementuj listę wiązaną jednokierunkową:





linked_list.c
#include <stdio.h>
#include <stdlib.h>
#include "linked_list.h"
#include "tested_declarations.h"
#include "rdebug.h"

struct linked_list_t* ll_create()
{
    return calloc(1, sizeof(struct linked_list_t));
}
int ll_push_back(struct linked_list_t* ll, int value)
{
    if (!ll || (ll->head && !ll->tail) || (!ll->head && ll->tail)) return 1;
    struct node_t *node = malloc(sizeof(struct node_t));
    if (!node) return 2;
    node->next = NULL;
    node->data = value;
    if (ll->tail) ll->tail->next = node;
    else ll->head = node;
    ll->tail = node;
    return 0;
}
int ll_push_front(struct linked_list_t* ll, int value)
{
    if (!ll || (ll->head && !ll->tail) || (!ll->head && ll->tail)) return 1;
    struct node_t *node = malloc(sizeof(struct node_t));
    if (!node) return 2;
    node->next = ll->head;
    node->data = value;
    ll->head = node;
    if (!ll->tail) ll->tail = node;
    return 0;
}
int ll_pop_front(struct linked_list_t* ll, int *err_code)
{
    if (!ll || !ll->head || !ll->tail) {
        if (err_code) *err_code = 1;
        return -1;
    }
    int value = ll->head->data;
    if (ll->head == ll->tail) ll->tail = NULL;
    struct node_t *tmp = ll->head;
    ll->head = ll->head->next;
    free(tmp);
    if (err_code) *err_code = 0;
    return value;
}
int ll_pop_back(struct linked_list_t* ll, int *err_code)
{
    if (!ll || !ll->head || !ll->tail) {
        if (err_code) *err_code = 1;
        return -1;
    }
    int value = ll->tail->data;
    struct node_t *tmp = ll->head;
    if (ll->head == ll->tail) ll->head = NULL;
    else {
        while (tmp->next != ll->tail) tmp = tmp->next;
        tmp->next = NULL;
    }
    free(ll->tail);
    if (!ll->head) ll->tail = NULL;
    else ll->tail = tmp;
    if (err_code) *err_code = 0;
    return value;
}
int ll_back(const struct linked_list_t* ll, int *err_code)
{
    if (!ll || !ll->head || !ll->tail) {
        if (err_code) *err_code = 1;
        return -1;
    }
    if (err_code) *err_code = 0;
    return ll->tail->data;
}
int ll_front(const struct linked_list_t* ll, int *err_code)
{
    if (!ll || !ll->head || !ll->tail) {
        if (err_code) *err_code = 1;
        return -1;
    }
    if (err_code) *err_code = 0;
    return ll->head->data;
}
struct node_t* ll_begin(struct linked_list_t* ll)
{
    if (!ll) return NULL;
    return ll->head;
}
struct node_t* ll_end(struct linked_list_t* ll)
{
    if (!ll) return NULL;
    return ll->tail;
}
int ll_size(const struct linked_list_t* ll)
{
    if (!ll || (ll->head && !ll->tail) || (!ll->head && ll->tail)) return -1;
    struct node_t *tmp = ll->head;
    int size = 0;
    while (tmp) {
        tmp = tmp->next;
        size++;
    }
    return size;
}
int ll_is_empty(const struct linked_list_t* ll)
{
    if (!ll || (ll->head && !ll->tail) || (!ll->head && ll->tail)) return -1;
    if (ll->head) return 0;
    else return 1;
}
int ll_at(const struct linked_list_t* ll, unsigned int index, int *err_code)
{
    if (!ll || !ll->head || !ll->tail || (int)index >= ll_size(ll)) {
        if (err_code) *err_code = 1;
        return 0;
    }
    struct node_t *tmp = ll->head;
    for (unsigned i = 0; i < index; ++i) tmp = tmp->next;
    if (err_code) *err_code = 0;
    return tmp->data;
}
int ll_insert(struct linked_list_t* ll, unsigned int index, int value)
{
    if (!ll || (ll->head && !ll->tail) || (!ll->head && ll->tail) || (int)index > ll_size(ll) || (int)index < 0) return 1;
    if ((int)index == 0) return ll_push_front(ll, value);
    if ((int)index == ll_size(ll)) return ll_push_back(ll, value);

    struct node_t *node = malloc(sizeof(struct node_t)), *tmp = ll->head;
    if(!node) return 2;
    node->data=value;
    for (unsigned i = 0; i < index - 1; ++i) tmp = tmp->next;
    node->next = tmp->next;
    tmp->next = node;
    return 0;
}
int ll_remove(struct linked_list_t* ll, unsigned int index, int *err_code)
{
    if (!ll || !ll->head || !ll->tail || (int)index >= ll_size(ll) || (int)index < 0) {
        if (err_code) *err_code = 1;
        return 0;
    }
    if(err_code) *err_code=0;
    if((int)index == 0) return ll_pop_front(ll, NULL);
    if((int)index == ll_size(ll) - 1) return ll_pop_back(ll, NULL);
    struct node_t *tmp = ll->head, *tmp2;
    for (unsigned i = 0; i < index - 1; ++i) tmp = tmp->next;
    tmp2 = tmp->next;
    tmp->next = tmp->next->next;
    int value = tmp2->data;
    free(tmp2);
    return value;
}
void ll_clear(struct linked_list_t* ll)
{
    if (!ll) return;
    struct node_t *tmp = ll->head;
    while (tmp) {
        ll->head = tmp->next;
        free(tmp);
        tmp = ll->head;
    }
    ll->head = NULL;
    ll->tail = NULL;
}
void ll_display(const struct linked_list_t* ll)
{
    if (!ll || !ll->head || !ll->tail) return;
    struct node_t *tmp = ll->head;
    while (tmp) {
        printf("%d ", tmp->data);
        tmp = tmp->next;
    }
}



linked_list.h
#ifndef LIST
#define LIST

struct node_t
{
    int data;
    struct node_t *next;
};
struct linked_list_t
{
    struct node_t *head;
    struct node_t *tail;
};
struct linked_list_t* ll_create();

int ll_push_back(struct linked_list_t* ll, int value);
int ll_push_front(struct linked_list_t* ll, int value);
int ll_pop_front(struct linked_list_t* ll, int *err_code);
int ll_pop_back(struct linked_list_t* ll, int *err_code);

int ll_back(const struct linked_list_t* ll, int *err_code);
int ll_front(const struct linked_list_t* ll, int *err_code);

struct node_t* ll_begin(struct linked_list_t* ll);
struct node_t* ll_end(struct linked_list_t* ll);

int ll_size(const struct linked_list_t* ll);
int ll_is_empty(const struct linked_list_t* ll);
int ll_at(const struct linked_list_t* ll, unsigned int index, int *err_code);

int ll_insert(struct linked_list_t* ll, unsigned int index, int value);

int ll_remove(struct linked_list_t* ll, unsigned int index, int *err_code);

void ll_clear(struct linked_list_t* ll);

void ll_display(const struct linked_list_t* ll);

#endif


main.c

#include <stdio.h>
#include <stdlib.h>
#include "linked_list.h"
#include "tested_declarations.h"
#include "rdebug.h"

int main()
{
    struct linked_list_t *ll = ll_create();
    if (!ll) {
        printf("Failed to allocate memory");
        return 8;
    }
    while (1) {
        printf("Co chcesz zrobic ");
        int op;
        int err = scanf("%d", &op);
        if (err != 1) {
            printf("Incorrect input");
            ll_clear(ll);
            free(ll);
            return 1;
        }
        int x;
        unsigned index;
        switch (op) {
        case 0:
            ll_clear(ll);
            free(ll);
            return 0;
        case 1:
            printf("Podaj liczbe ");
            err = scanf("%d", &x);
            if (err != 1) {
                printf("Incorrect input");
                ll_clear(ll);
                free(ll);
                return 1;
            }
            err = ll_push_back(ll, x);
            if (err == 2) {
                printf("Failed to allocate memory");
                ll_clear(ll);
                free(ll);
                return 8;
            }
            break;
        case 2:
            if (ll_is_empty(ll)) printf("List is empty\n");
            else {
                int x = ll_pop_back(ll, NULL);
                printf("%d\n", x);
            }
            break;
        case 3:
            printf("Podaj liczbe ");
            err = scanf("%d", &x);
            if (err != 1) {
                printf("Incorrect input");
                ll_clear(ll);
                free(ll);
                return 1;
            }
            err = ll_push_front(ll, x);
            if (err == 2) {
                printf("Failed to allocate memory");
                ll_clear(ll);
                free(ll);
                return 8;
            }
            break;
        case 4:
            if (ll_is_empty(ll)) printf("List is empty\n");
            else {
                int x = ll_pop_front(ll, NULL);
                printf("%d\n", x);
            }
            break;
        case 5:
            printf("Podaj liczbe ");
            err = scanf("%d", &x);
            if (err != 1) {
                printf("Incorrect input");
                ll_clear(ll);
                free(ll);
                return 1;
            }
            printf("Podaj indeks ");
            err = scanf("%u", &index);
            if (err != 1) {
                printf("Incorrect input");
                ll_clear(ll);
                free(ll);
                return 1;
            }
            err = ll_insert(ll, index, x);
            if (err == 1) printf("Index out of range\n");
            if (err == 2) {
                printf("Failed to allocate memory");
                ll_clear(ll);
                free(ll);
                return 8;
            }
            break;
        case 6:
            if (ll_is_empty(ll)) {
                printf("List is empty\n");
                break;
            }
            printf("Podaj indeks: ");
            err = scanf("%u", &index);
            if (err != 1) {
                printf("Incorrect input");
                ll_clear(ll);
                free(ll);
                return 1;
            }
            int x = ll_remove(ll, index, &err);
            if (err == 1) printf("Index out of range\n");
            else printf("%d\n", x);
            break;
        case 7:
            if (ll_is_empty(ll)) printf("List is empty\n");
            else printf("%d\n", ll_back(ll, NULL));
            break;
        case 8:
            if (ll_is_empty(ll)) printf("List is empty\n");
            else printf("%d\n", ll_front(ll, NULL));
            break;
        case 9:
            printf("%d\n", ll_is_empty(ll));
            break;
        case 10:
            printf("%d\n", ll_size(ll));
            break;
        case 11:
            ll_clear(ll);
            break;
        case 12:
            if (ll_is_empty(ll)) {
                printf("List is empty\n");
                break;
            }
            printf("Podaj indeks: ");
            err = scanf("%u", &index);
            if (err != 1) {
                printf("Incorrect input");
                ll_clear(ll);
                free(ll);
                return 1;
            }
            x = ll_at(ll, index, &err);
            if (err == 1) printf("Index out of range\n");
            else printf("%d\n", x);
            break;
        case 13:
            if (ll_is_empty(ll)) printf("List is empty");
            else ll_display(ll);
            printf("\n");
            break;
        default:
            printf("Incorrect input data\n");
        }
    }
}
