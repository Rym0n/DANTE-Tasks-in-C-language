Lista dwukierunkowa - sortowanie
Napisz program, który pozwoli użytkownikowi na wprowadzenie elementów listy, a następnie na jej posortowanie w zależności od wyboru użytkownika.

W tym celu zaimplementuj listę wiązaną dwukierunkową, opartą o następujące struktury oraz API:






doubly_linked_list.c

#include <stdio.h>
#include <stdlib.h>
#include "doubly_linked_list.h"
#include "tested_declarations.h"
#include "rdebug.h"

struct doubly_linked_list_t* dll_create()
{
    return calloc(1, sizeof(struct doubly_linked_list_t));
}
int dll_push_back(struct doubly_linked_list_t* dll, int value)
{
    if (!dll || (dll->head && !dll->tail) || (!dll->head && dll->tail)) return 1;
    struct node_t *node = malloc(sizeof(struct node_t));
    if (!node) return 2;
    node->data = value;
    node->next = NULL;
    if (!dll->head) {
        node->prev = NULL;
        dll->head = node;
        dll->tail = node;
        return 0;
    }
    dll->tail->next = node;
    node->prev = dll->tail;
    dll->tail = node;
    return 0;
}
int dll_size(const struct doubly_linked_list_t* dll)
{
    if (!dll || (dll->head && !dll->tail) || (!dll->head && dll->tail)) return -1;
    struct node_t *tmp = dll->head;
    int size = 0;
    while (tmp) {
        tmp = tmp->next;
        size++;
    }
    return size;
}
int dll_is_empty(const struct doubly_linked_list_t* dll)
{
    if (!dll || (dll->head && !dll->tail) || (!dll->head && dll->tail)) return -1;
    if (dll->head) return 0;
    else return 1;
}
void dll_clear(struct doubly_linked_list_t* dll)
{
    if (!dll) return;
    struct node_t *tmp = dll->head;
    while (tmp) {
        dll->head = tmp->next;
        free(tmp);
        tmp = dll->head;
    }
    dll->head = NULL;
    dll->tail = NULL;
}
void dll_display(const struct doubly_linked_list_t* dll)
{
    if (!dll || !dll->head || !dll->tail) return;
    struct node_t *tmp = dll->head;
    while (tmp) {
        printf("%d ", tmp->data);
        tmp = tmp->next;
    }
}
void dll_display_reverse(const struct doubly_linked_list_t* dll)
{
    if (!dll || !dll->head || !dll->tail) return;
    struct node_t *tmp = dll->tail;
    while (tmp) {
        printf("%d ", tmp->data);
        tmp = tmp->prev;
    }
}
int dll_sort_asc(struct doubly_linked_list_t* dll)
{
    if (!dll || !dll->head || !dll->tail) return 1;
    int size = dll_size(dll);
    for (int i = 0; i < size; ++i) {
        struct node_t *fir = dll->head, *sec = dll->head->next;
        while (sec) {
            if (sec->data < fir->data) {
                if (dll->head == fir) dll->head = sec;
                if (dll->tail == sec) dll->tail = fir;
                node_swap(fir, sec);
                sec = fir->next;
            }
            else {
                fir = sec;
                sec = sec->next;
            }
        }
    }
    return 0;
}
int dll_sort_desc(struct doubly_linked_list_t* dll)
{
    if (!dll || !dll->head || !dll->tail) return 1;
    int size = dll_size(dll);
    for (int i = 0; i < size; ++i) {
        struct node_t *fir = dll->head, *sec = dll->head->next;
        while (sec) {
            if (sec->data > fir->data) {
                if (dll->head == fir) dll->head = sec;
                if (dll->tail == sec) dll->tail = fir;
                node_swap(fir, sec);
                sec = fir->next;
            }
            else {
                fir = sec;
                sec = sec->next;
            }
        }
    }
    return 0;
}
int node_swap(struct node_t* first, struct node_t* second)
{
    if (!first || !second) return 1;
    if (first->prev) first->prev->next = second;
    if (second->next) second->next->prev = first;
    second->prev = first->prev;
    first->next = second->next;
    second->next = first;
    first->prev = second;
    return 0;
}


doubly_linked_list.h

#ifndef LIST
#define LIST

struct doubly_linked_list_t
{
  struct node_t *head;
  struct node_t *tail;
};

struct node_t
{
  int data;
  struct node_t *next;
  struct node_t *prev;
};
struct doubly_linked_list_t* dll_create();

int dll_push_back(struct doubly_linked_list_t* dll, int value);

int dll_size(const struct doubly_linked_list_t* dll);
int dll_is_empty(const struct doubly_linked_list_t* dll);

void dll_clear(struct doubly_linked_list_t* dll);

void dll_display(const struct doubly_linked_list_t* dll);
void dll_display_reverse(const struct doubly_linked_list_t* dll);

int dll_sort_asc(struct doubly_linked_list_t* dll);
int dll_sort_desc(struct doubly_linked_list_t* dll);

int node_swap(struct node_t* first, struct node_t* second);

#endif



main.c

#include <stdio.h>
#include <stdlib.h>
#include "doubly_linked_list.h"
#include "tested_declarations.h"
#include "rdebug.h"

int main()
{
    struct doubly_linked_list_t *dll = dll_create();
    if (!dll) {
        printf("Failed to allocate memory");
        return 8;
    }
    printf("Enter list (-1 when done): ");
    int x;
    do {
        int err = scanf("%d", &x);
        if (err != 1) {
            printf("Incorrect input");
            dll_clear(dll);
            free(dll);
            return 1;
        }
        if (x != -1) {
            err = dll_push_back(dll, x);
            if (err == 2) {
                printf("Failed to allocate memory");
                dll_clear(dll);
                free(dll);
                return 8;
            }
        }
    } while (x != -1);
    if (dll_is_empty(dll)) {
        printf("Not enough data available");
        free(dll);
        return 3;
    }
    printf("Choose sorting (0 or 1): ");
    int err = scanf("%d", &x);
    if (err != 1) {
        printf("Incorrect input");
        dll_clear(dll);
        free(dll);
        return 1;
    }
    if (x != 0 && x != 1) {
        printf("Incorrect input data");
        dll_clear(dll);
        free(dll);
        return 2;
    }
    if (x == 0) dll_sort_asc(dll);
    else dll_sort_desc(dll);
    dll_display(dll);
    printf("\n");
    dll_display_reverse(dll);
    dll_clear(dll);
    free(dll);
    return 0;
}
