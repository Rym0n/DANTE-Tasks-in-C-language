Zamiana bitów miejscami

Napisz program, który w podanej liczbie zamienia dwa bity miejscami. W tym celu wykorzystaj funkcję swap_bits:

#include <stdio.h>
#include <stdint.h>
#include "tested_declarations.h"
#include "rdebug.h"

int toggle_bit(uint32_t* pvalue, int b);
int set_bit(uint32_t* pvalue, int b);
int clear_bit(uint32_t* pvalue, int b);
int isset_bit(const uint32_t* pvalue, int b);
unsigned int swap_bits(unsigned int * pvalue, int b1, int b2);
int main()
{
    printf("Enter an uint32 number: ");
    unsigned int x;
    int err = scanf("%ud", &x);
    if (err != 1) {
        printf("Incorrect input");
        return 1;
    }
    printf("Enter 1st bit index: ");
    int b1;
    err = scanf("%d", &b1);
    if (err != 1) {
        printf("Incorrect input");
        return 1;
    }
    if (b1 < 0 || b1 >= 32) {
        printf("Error");
        return 1;
    }
    printf("Enter 2nd bit index: ");
    int b2;
    err = scanf("%d", &b2);
    if (err != 1) {
        printf("Incorrect input");
        return 1;
    }
    if (b2 < 0 || b2 >= 32) {
        printf("Error");
        return 1;
    }
    swap_bits(&x, b1, b2);
    printf("%ud", x);
    return 0;
}
unsigned int swap_bits(unsigned int * pvalue, int b1, int b2)
{
    if (!pvalue || b1 < 0 || b2 < 0 || b1 >= 32 || b2 >= 32) return 1;
    if (b1 == b2) return 0;
    int bit1 = !!(*pvalue & (1 << b1));
    int bit2 = !!(*pvalue & (1 << b2));
    if (bit1 == bit2) return 0;
    toggle_bit(pvalue, b1);
    toggle_bit(pvalue, b2);
    return 0;
}
int toggle_bit(uint32_t* pvalue, int b)
{
    if (!pvalue || b < 0) return -1;
    if (isset_bit(pvalue, b)) return clear_bit(pvalue, b);
    return set_bit(pvalue, b);
}
int set_bit(uint32_t* pvalue, int b)
{
    if (!pvalue || b < 0) return -1;
    uint32_t bit = 1 << b;
    *pvalue = *pvalue | bit;
    return 0;
}
int clear_bit(uint32_t* pvalue, int b)
{
    if (!pvalue || b < 0) return -1;
    uint32_t bit = ~0 ^ (1 << b);
    *pvalue = *pvalue & bit;
    return 0;
}
int isset_bit(const uint32_t* pvalue, int b)
{
    if (!pvalue || b < 0) return -1;
    uint32_t bit = 1 << b;
    if (*pvalue & bit) return 1;
    return 0;
}
