Włącz, wyłącz i przełącz


#include <stdio.h>
#include <stdint.h>
#include "tested_declarations.h"
#include "rdebug.h"

int toggle_bit(uint32_t* pvalue, int b);
int set_bit(uint32_t* pvalue, int b);
int clear_bit(uint32_t* pvalue, int b);
int isset_bit(const uint32_t* pvalue, int b);
int main()
{
    printf("Enter a value: ");
    uint32_t x;
    int err = scanf("%ud", &x);
    if (err != 1) {
        printf("Incorrect input");
        return 1;
    }
    printf("Enter an index of a bit: ");
    int bit;
    err = scanf("%d", &bit);
    if (err != 1) {
        printf("Incorrect input");
        return 1;
    }
    if (bit < 0 || bit > 31) {
        printf("Invalid bit index");
        return 1;
    }
    printf("Select operation (0-toggle, 1-set, 2-clear, 3-read): ");
    int op;
    err = scanf("%d", &op);
    if (err != 1) {
        printf("Incorrect input");
        return 1;
    }
    if (op < 0 || op > 3) {
        printf("Invalid operation");
        return 1;
    }
    if (op == 3) printf("%d", isset_bit(&x, bit));
    else {
        if (op == 0) toggle_bit(&x, bit);
        else if (op == 1) set_bit(&x, bit);
        else clear_bit(&x, bit);
        printf("%08x", x);
    }
    return 0;
}
int toggle_bit(uint32_t* pvalue, int b)
{
    if (!pvalue || b < 0 || b >= 32) return -1;
    if (isset_bit(pvalue, b)) return clear_bit(pvalue, b);
    return set_bit(pvalue, b);
}
int set_bit(uint32_t* pvalue, int b)
{
    if (!pvalue || b < 0 || b >= 32) return -1;
    uint32_t bit = 1 << b;
    *pvalue = *pvalue | bit;
    return 0;
}
int clear_bit(uint32_t* pvalue, int b)
{
    if (!pvalue || b < 0 || b >= 32) return -1;
    uint32_t bit = ~0 ^ (1 << b);
    *pvalue = *pvalue & bit;
    return 0;
}
int isset_bit(const uint32_t* pvalue, int b)
{
    if (!pvalue || b < 0 || b >= 32) return -1;
    uint32_t bit = 1 << b;
    if (*pvalue & bit) return 1;
    return 0;
}
