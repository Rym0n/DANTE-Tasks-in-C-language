 	
Figury geometryczne
Napisz program do przechowywania informacji o figurach geometrycznych w tablicy unii i wyświetlajacy je po ich uprzednim posortowaniu.

W tym celu przygotuj następujący zestaw typów danych:


#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "tested_declarations.h"
#include "rdebug.h"

struct point_t {
    int x;
    int y;
};

struct rectangle_t {
    struct point_t p;
    int width;
    int height;
};

struct circle_t {
    struct point_t c;
    float r;
};

enum figure_types {
    TRIANGLE = 1,
    RECTANGLE,
    CIRCLE
};

struct triangle_t {
    struct point_t p1;
    struct point_t p2;
    struct point_t p3;
};

struct figure_t {
    union {
        struct rectangle_t rect;
        struct triangle_t triangle;
        struct circle_t circ;
    };
    enum figure_types type;
};

float area_triangle(const struct triangle_t *t) {
    if (t == NULL) {
        return -1;
    }
    if(t->p1.x == t->p2.x &&  t->p1.y == t->p2.y)return -1;
    if(t->p1.x == t->p3.x &&  t->p1.y == t->p3.y)return -1;
    if(t->p2.x == t->p3.x &&  t->p2.y == t->p3.y) return -1;
    float area = fabs((float)(((t->p2.x - t->p1.x) * (t->p3.y - t->p1.y)) - ((t->p2.y - t->p1.y) * (t->p3.x - t->p1.x)))) / 2;
    if(area>0){
        return area;
    }
    else{
        return -1;
    }
}


float area_rectangle(const struct rectangle_t *r) {
    if (r == NULL|| r->height<=0 || r->width<=0)
        return -1;
    float area = r->height * r->width;
    return area;
}


float area_circle(const struct circle_t *c) {
    if (c == NULL || c->r<=0)
        return -1;
    float area = M_PI * c->r * c->r;
    return area;
}


float area_figure(const struct figure_t *f) {
    if (f == NULL)
        return -1;
    float area = -1;
    if (f->type == TRIANGLE){
        area = area_triangle(&(f->triangle));
    }
    else if (f->type == RECTANGLE) {
        area = area_rectangle(&(f->rect));
    }
    else if (f->type == CIRCLE){
        area = area_circle(&(f->circ));
    }
    return area;
}


void display_rectangle(const struct rectangle_t *rect) {
    if (rect == NULL) return;
    printf("Rectangle (%d, %d), width = %d, height = %d\n", rect->p.x, rect->p.y, rect->width, rect->height);
}


void display_triangle(const struct triangle_t *t) {
    if (t == NULL)  return;
    printf("Triangle p1(%d, %d), p2(%d, %d), p3(%d, %d)\n",
           t->p1.x,
           t->p1.y,
           t->p2.x,
           t->p2.y,
           t->p3.x,
           t->p3.y);
}


void display_circle(const struct circle_t *circ) {
    if (circ == NULL)   return;
    printf("Circle (%d, %d), radius = %f\n", circ->c.x, circ->c.y, circ->r);
}


void display_figure(struct figure_t *f) {
    if (f == NULL)
        return;
    if (f->type == TRIANGLE)
        display_triangle(&(f->triangle));
    else if (f->type == RECTANGLE)
        display_rectangle(&(f->rect));
    else if (f->type == CIRCLE)
        display_circle(&(f->circ));
}


int sort_by_area(struct figure_t **figures, int size) {
    if (!figures || !*figures || size < 1)
        return 1;
    for (int i = 0; i < size - 1; ++i) {
        int k=0;
        for (int j = 0; j < size-i-1; ++j) {
            float area1 = area_figure((*figures + j));
            float area2 = area_figure((*figures + j + 1));

            if (area1 <= 0 || area2 <= 0)   return 1;

            if (area1 < area2) {
                struct figure_t temp = *(*figures + j);
                *(*figures + j) = *(*figures + j + 1);
                *(*figures + j + 1) = temp;
                k=1;
            }
        }
        if(k==0) return 0;
    }
    return 0;
}

int main() {
    struct figure_t figure[50];
    int size = 0;
    int type;
    int res;
    for (int i = 0; i < 50; ++i, size = i) {
        printf("Podaj typ figury: ");
        if (scanf("%d", &type) != 1) {
            printf("Incorrect input");
            return 1;
        }
        getchar();
        if (type == 1) {
            (figure + i)->type = (enum figure_types)type;
            printf("Podaj koordynaty trojkata (x1 y1 x2 y2 x3 y3): ");
            if (scanf("%d %d %d %d %d %d", &(figure + i)->triangle.p1.x,
                      &(figure + i)->triangle.p1.y,
                      &(figure + i)->triangle.p2.x,
                      &(figure + i)->triangle.p2.y,
                      &(figure + i)->triangle.p3.x,
                      &(figure + i)->triangle.p3.y ) != 6) {
                printf("Incorrect input");
                return 1;
            }
            getchar();
        }
        else if (type == 2) {
            (figure + i)->type = (enum figure_types)type;
            printf("Podaj prostokat (x y width height): ");
            if (scanf("%d %d %d %d", &(figure + i)->rect.p.x,
                      &(figure + i)->rect.p.y,
                      &(figure + i)->rect.width,
                      &(figure + i)->rect.height) != 4) {
                printf("Incorrect input");
                return 1;
            }
            getchar();
        } else if (type == 3) {
            (figure + i)->type = (enum figure_types)type;
            printf("Podaj kolo (x y r): ");
            if (scanf("%d %d %f", &(figure + i)->circ.c.x, &(figure + i)->circ.c.y, &(figure + i)->circ.r) != 3) {
                printf("Incorrect input");
                return 1;
            }
            getchar();
        } else if (type == 0) {
            if (i == 0) {
                printf("Incorrect input data");
                return 2;
            }
            size = i;
            break;
        } else {
            printf("Incorrect input data");
            return 2;
        }
    }
    struct figure_t *figure_ptr = figure;
    res=sort_by_area(&figure_ptr, size);
    if(res==1){
        printf("Incorrect input data");
        return 2;
    }
    for (int i = 0; i < size; ++i) {
        display_figure(figure + i);
    }
    return 0;
}