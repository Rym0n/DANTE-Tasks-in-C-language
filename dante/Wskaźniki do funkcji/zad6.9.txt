Ruchomy punkt

board.c
#include <stdio.h>
#include <stdlib.h>
#include "board.h"
#include "tested_declarations.h"
#include "rdebug.h"

int create_board(struct board_t **board, int width, int height)
{
    if (!board || width <= 0 || height <= 0) return 1;
    *board = malloc(sizeof(struct board_t));
    if (!*board) return 2;
    (*board)->board = malloc(sizeof(char*) * height);
    if (!(*board)->board) {
        free(*board);
        return 2;
    }
    for (int i = 0; i < height; ++i) {
        *(((*board)->board)+i) = calloc(width + 1, 1);
        if (!*(((*board)->board) + i)) {
            for (int j = 0; j < i; ++j) free(*(((*board)->board) + j));
            free((*board)->board);
            free(*board);
            return 2;
        }
    }
    (*board)->height = height;
    (*board)->width = width;
    (*board)->is_init = 0;
    (*board)->move_player_up = move_player_up;
    (*board)->move_player_down = move_player_down;
    (*board)->move_player_left = move_player_left;
    (*board)->move_player_right = move_player_right;
    for (int i = 0; i < height; ++i) {
        for (int j = 0; j < width; ++j) {
            *(*(((*board)->board) +i ) + j) = '.';
        }
    }
    return 0;
}
void display_board(const struct board_t *board)
{
    if (!board || !board->board) return;
    for (int i = 0; i < board->height; ++i) {
        printf("%s\n", *(board->board + i));
    }
}
void free_board(struct board_t *board)
{
    if (!board || board->height <= 0 || board->width <= 0 || !board->board) return;
    for (int i = 0; i < board->height; ++i) free(*(board->board+i));
    free(board->board);
    free(board);
}
int set_player(struct board_t *board, int x, int y)
{
    if (!board || !board->board || board->height <= 0 || board->width <= 0 || x < 0 || y < 0 || x >= board->width || y >= board->height || board->is_init == 1) return 1;
    board->player.x = x;
    board->player.y = y;
    board->is_init = 1;
    *(*(board->board + y) + x) = '@';
    return 0;
}
struct board_t* move_player_up(struct board_t* board)
{
    if (!board || !board->board || board->height <= 0 || board->width <= 0 || board->is_init == 0 || board->player.x < 0 || board->player.x >= board->width || board->player.y < 0 || board->player.y >= board->height) return NULL;
    for(int i=0; i < board->height; ++i) if(!*(board->board + i)) return NULL;
    *(*(board->board + board->player.y) + board->player.x) = '.';
    board->player.y = (board->height + board->player.y - 1) % board->height;
    *(*(board->board + board->player.y) + board->player.x) = '@';
    return board;
}
struct board_t* move_player_down(struct board_t* board)
{
    if (!board || !board->board || board->height <= 0 || board->width <= 0 || board->is_init == 0 || board->player.x < 0 || board->player.x >= board->width || board->player.y < 0 || board->player.y >= board->height) return NULL;
    for(int i=0; i < board->height; ++i) if(!*(board->board + i)) return NULL;
    *(*(board->board + board->player.y) + board->player.x) = '.';
    board->player.y = (board->player.y + 1) % board->height;
    *(*(board->board + board->player.y) + board->player.x) = '@';
    return board;
}
struct board_t* move_player_left(struct board_t* board)
{
    if (!board || !board->board || board->height <= 0 || board->width <= 0 || board->is_init == 0 || board->player.x < 0 || board->player.x >= board->width || board->player.y < 0 || board->player.y >= board->height) return NULL;
    for(int i=0; i < board->height; ++i) if(!*(board->board + i)) return NULL;
    *(*(board->board + board->player.y) + board->player.x) = '.';
    board->player.x = (board->width + board->player.x - 1) % board->width;
    *(*(board->board + board->player.y) + board->player.x) = '@';
    return board;
}
struct board_t* move_player_right(struct board_t* board)
{
    if (!board || !board->board || board->height <= 0 || board->width <= 0 || board->is_init == 0 || board->player.x < 0 || board->player.x >= board->width || board->player.y < 0 || board->player.y >= board->height) return NULL;
    for(int i=0; i < board->height; ++i) if(!*(board->board + i)) return NULL;
    *(*(board->board + board->player.y) + board->player.x) = '.';
    board->player.x = (board->player.x + 1) % board->width;
    *(*(board->board + board->player.y) + board->player.x) = '@';
    return board;
}

board.h
#ifndef BOARD
#define BOARD

struct point_t
{
    int x;
    int y;
};
struct board_t
{
    struct point_t player;
    char **board;
    int width;
    int height;
    unsigned char is_init:1;
    struct board_t* (*move_player_up)(struct board_t*);
    struct board_t* (*move_player_down)(struct board_t*);
    struct board_t* (*move_player_left)(struct board_t*);
    struct board_t* (*move_player_right)(struct board_t*);
};
int create_board(struct board_t **board, int width,int height);
void display_board(const struct board_t *board);
void free_board(struct board_t *board);
int set_player(struct board_t *board, int x, int y);
struct board_t* move_player_up(struct board_t*);
struct board_t* move_player_down(struct board_t*);
struct board_t* move_player_left(struct board_t*);
struct board_t* move_player_right(struct board_t*);

#endif


main.c

#include <stdio.h>
#include <stdlib.h>
#include "board.h"
#include "tested_declarations.h"
#include "rdebug.h"

int main()
{
    printf("Enter width and height of the board: ");
    int width, height;
    int err = scanf("%d %d", &width, &height);
    if (err != 2) {
        printf("Incorrect input");
        return 1;
    }
    if (width <= 0 || height <= 0) {
        printf("Incorrect input data");
        return 2;
    }
    struct board_t *board;
    err = create_board(&board, width, height);
    if (err == 2) {
        printf("Failed to allocate memory");
        return 8;
    }
    printf("Enter player's initial coordinates (x, y): ");
    int x, y;
    err = scanf("%d %d", &x, &y);
    if (err != 2) {
        printf("Incorrect input");
        free_board(board);
        return 1;
    }
    err = set_player(board, x, y);
    if (err == 1) {
        printf("Incorrect input data");
        free_board(board);
        return 2;
    }
    display_board(board);
    getchar();
    do {
        printf("Choose your action: ");
        char c = getchar();
        getchar();
        switch (c) {
        case 'w':
            board->move_player_up(board);
            display_board(board);
            break;
        case 's':
            board->move_player_down(board);
            display_board(board);
            break;
        case 'a':
            board->move_player_left(board);
            display_board(board);
            break;
        case 'd':
            board->move_player_right(board);
            display_board(board);
            break;
        case 'q':
        free_board(board);
            return 0;
        default:
            printf("Incorrect choice\n");
        }
    } while (1);
}
