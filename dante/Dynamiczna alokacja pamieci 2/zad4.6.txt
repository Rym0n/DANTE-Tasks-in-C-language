Operacje na macierzach

Rozbuduj program z zadania 4.4 Macierz o następujące funkcje:


main.c

#include "matrix_utils.h"
#include "tested_declarations.h"
#include "rdebug.h"


int main() {
    char *buf1 = (char*)calloc(20, sizeof(char));
    if(!buf1)
        return printf("Failed to allocate memory"), 8;

    printf("Podaj nazwe pliku pierwszego:");

    fgets(buf1,20,stdin);
    if(strlen(buf1)>19) while(getchar()!='\n');
    if(*(buf1+strlen(buf1)-1)=='\n') *(buf1+strlen(buf1)-1)='\0';

    struct matrix_t * wsk;
    int er;
    if(*(buf1+strlen(buf1)-1)=='t' && *(buf1+strlen(buf1)-2)=='x' && *(buf1+strlen(buf1)-3)=='t' && *(buf1+strlen(buf1)-4)=='.'){
        wsk = matrix_load_t(buf1,&er);
        if(er ==2){
            return printf("Couldn't open file"), free(buf1), 4;
        }
        else if(er==3)
            return printf("File corrupted"), free(buf1), 6;
        else if(er==4)
            return printf("Failed to allocate memory"), free(buf1), 8;
    } else if(*(buf1+strlen(buf1)-1)=='n' && *(buf1+strlen(buf1)-2)=='i' && *(buf1+strlen(buf1)-3)=='b' && *(buf1+strlen(buf1)-4)=='.'){
        wsk = matrix_load_b(buf1,&er);
        if(er ==2){
            return printf("Couldn't open file"), free(buf1), 4;
        }
        else if(er==3)
            return printf("File corrupted"), free(buf1), 6;
        else if(er==4)
            return printf("Failed to allocate memory"), free(buf1), 8;
    } else {
        return printf("Unsupported file format"), free(buf1), 7;
    }

    free(buf1);
    char * buf2 = (char*)calloc(20, sizeof(char));
    printf("Podaj nazwe pliku drugiego:");
    setbuf(stdin, 0);
    fgets(buf2,20,stdin);
    if(strlen(buf2)>19) while(getchar()!='\n');
    if(*(buf2+strlen(buf2)-1)=='\n') *(buf2+strlen(buf2)-1)='\0';


    struct matrix_t * wsk2;
    if(*(buf2+strlen(buf2)-1)=='t' && *(buf2+strlen(buf2)-2)=='x' && *(buf2+strlen(buf2)-3)=='t' && *(buf2+strlen(buf2)-4)=='.'){
        wsk2 = matrix_load_t(buf2,&er);
        if(er ==2){
            return printf("Couldn't open file"), matrix_destroy_struct(&wsk),free(buf2), 4;
        }
        else if(er==3)
            return printf("File corrupted"), free(buf2), matrix_destroy_struct(&wsk),6;
        else if(er==4)
            return printf("Failed to allocate memory"), free(buf2), matrix_destroy_struct(&wsk),8;
    } else if(*(buf2+strlen(buf2)-1)=='n' && *(buf2+strlen(buf2)-2)=='i' && *(buf2+strlen(buf2)-3)=='b' && *(buf2+strlen(buf2)-4)=='.'){
        wsk2 = matrix_load_b(buf2,&er);
        if(er ==2){
            return printf("Couldn't open file"), free(buf2), matrix_destroy_struct(&wsk),4;
        }
        else if(er==3)
            return printf("File corrupted"), free(buf2), matrix_destroy_struct(&wsk),6;
        else if(er==4)
            return printf("Failed to allocate memory"), free(buf2), matrix_destroy_struct(&wsk),8;
    } else {
        return printf("Unsupported file format"), free(buf2), matrix_destroy_struct(&wsk),7;
    }

    free(buf2);

    struct matrix_t *res = matrix_add(wsk,wsk2);
    if(res==NULL)
        printf("Error\n");
    else{
        matrix_display(res);
        matrix_destroy_struct(&res);
    }
    res = matrix_subtract(wsk,wsk2);
    if(res==NULL){
        printf("Error\n");
    } else{
        matrix_display(res);
        matrix_destroy_struct(&res);
    }
    res = matrix_multiply(wsk,wsk2);
     if(res==NULL){
         printf("Error\n");
     } else{
         matrix_display(res);
     }
     if(res!=NULL) matrix_destroy_struct(&res);
    matrix_destroy_struct(&wsk);
    matrix_destroy_struct(&wsk2);

}


matrix_utils.c
//
// Created by root on 6/26/21.
//

#include "matrix_utils.h"
#include "tested_declarations.h"
#include "rdebug.h"

void matrix_destroy(struct matrix_t *m) {
    if (m == NULL) {
        return;
    }
    int **ptr = m->ptr;
    if (ptr != NULL) {
        int i;
        for (i = 0; i < m->height; i++) {
            free(*(ptr + i));
        }
        free(ptr);
    }
}

int matrix_create(struct matrix_t *m, int width, int height) {
    if (m == NULL || width < 1 || height < 1) {
        return 1;
    }
    m->ptr = malloc(sizeof(int *) * height);
    if (m->ptr == NULL) {
        return 2;
    }
    int i;
    for (i = 0; i < height; i++) {
        *(m->ptr + i) = malloc(sizeof(int) * width);
        if (*(m->ptr + i) == NULL) {
            m->height = i;
            matrix_destroy(m);
            return 2;
        }
    }
    m->height = height;
    m->width = width;
    return 0;
}

int matrix_read(struct matrix_t *m) {
    if (m == NULL || m->ptr == NULL || m->height < 1 || m->width < 1) {
        return 1;
    }
    int i, j;
    for (i = 0; i < m->height; i++) {
        for (j = 0; j < m->width; j++) {
            if (scanf("%d", (*(m->ptr + i) + j)) != 1) {
                return 2;
            }
        }
    }
    return 0;
}

void matrix_display(const struct matrix_t *m) {
    if (m == NULL || m->ptr == NULL || m->height < 1 || m->width < 1) {
        return;
    }
    int i, j;
    for (i = 0; i < m->height; i++) {
        for (j = 0; j < m->width; j++) {
            printf("%d ", *(*(m->ptr + i) + j));
        }
        printf("\n");
    }
}

struct matrix_t* matrix_create_struct(int width, int height){
    if(width <= 0 || height <=0)
        return NULL;

    struct matrix_t *wsk = (struct matrix_t*)calloc(1, sizeof(struct matrix_t));
    if(wsk==NULL)
        return wsk;

    wsk->ptr = (int**) calloc(height,sizeof(int*));
    if(!wsk->ptr){
        free(wsk);
        return NULL;
    }

    for(int i = 0 ; i < height ; i++){
        *(wsk->ptr+i) = (int*) calloc(width,sizeof(int));
        if(!(*(wsk->ptr+i))){
            for(int j = i-1 ; j>=0 ; j--){
                free(*(wsk->ptr+j));
            }
            free(wsk->ptr);
            free(wsk);
            return NULL;
        }
    }
    wsk->height = height;
    wsk->width = width;
    return wsk;
}

void matrix_destroy_struct(struct matrix_t **m){
    if(!m)
        return;
    for(int i = 0 ; i< (*m)->height ; i++){
        free(*((*m)->ptr+i));
    }
    free((*m)->ptr);
    free((*m));
    *m=NULL;
}

struct matrix_t* matrix_copy(const struct matrix_t *copy){
    if(copy == NULL || copy->ptr == NULL  || copy->width < 1 || copy->height < 1)
        return NULL;

    struct matrix_t * c = matrix_create_struct(copy->width, copy->height);
    if(c == NULL)
        return c;

    for(int i = 0 ; i < c->height ; i++){
        for(int j = 0 ; j< c->width ; j++) {
            *(*(c->ptr + i) + j) = *(*(copy->ptr + i) + j);
        }
    }
    return c;
}

struct matrix_t* matrix_add(const struct matrix_t *m1, const struct matrix_t *m2){
    if(m1==NULL || m1->ptr == NULL || m1->width < 1 || m1->height < 1 || m2==NULL || m2->ptr == NULL || m2->width < 1 || m2->height < 1)
        return NULL;
    if(m1->width!=m2->width)
        return NULL;
    if(m1->height!=m2->height)
        return NULL;
    struct matrix_t *result = matrix_create_struct(m1->width, m1->height);
    if(result==NULL)
        return result;

    for(int i = 0 ; i < result->height ; i++){
        for(int j = 0 ; j < result->width ; j++){
            *(*(result->ptr+i)+j) = *(*(m1->ptr+i)+j)+ *(*(m2->ptr+i)+j);
        }
    }

    return result;
}
struct matrix_t* matrix_subtract(const struct matrix_t *m1, const struct matrix_t *m2){
    if(m1==NULL || m1->ptr == NULL || m1->width < 1 || m1->height < 1 || m2==NULL || m2->ptr == NULL || m2->width < 1 || m2->height < 1)
        return NULL;
    if(m1->width!=m2->width)
        return NULL;
    if(m1->height!=m2->height)
        return NULL;
    struct matrix_t *result = matrix_create_struct(m1->width, m1->height);
    if(result==NULL)
        return result;

    for(int i = 0 ; i < result->height ; i++){
        for(int j = 0 ; j < result->width ; j++){
            *(*(result->ptr+i)+j) = *(*(m1->ptr+i)+j)- *(*(m2->ptr+i)+j);
        }
    }

    return result;
}

struct matrix_t* matrix_multiply(const struct matrix_t *m1, const struct matrix_t *m2){
    if(m1 == NULL || m2 == NULL || m1->ptr ==NULL || m2->ptr==NULL || m1->width < 1 || m2->width< 1 || m1->height < 1 || m2-> height< 1)
        return NULL;
    if(m1->width != m2->height)
        return NULL;

    struct matrix_t *result = matrix_create_struct(m1->height, m2->width);
    if(result==NULL)
        return result;

    for(int i = 0 ; i< result->height ; i++){
        for(int j = 0 ; j < result->width; j++){
            *(*(result->ptr+i)+j)=0;
        }
    }
    for(int i = 0 ; i < m1->height ; i++){
        for(int j = 0 ; j < m2->width ; j ++){
            for(int k = 0 ; k < m2->height ; k++){
                *(*(result->ptr+i)+j) += ((*(*(m1->ptr+i)+k)) * (*(*(m2->ptr+k)+j)));
            }
        }
    }
    return result;
}

struct matrix_t* matrix_load_b(const char *filename, int *err_code){
    if(err_code)
        *err_code=0;
    if(filename==NULL){
        if(err_code)
            *err_code = 1;
        return NULL;
    }

    FILE * f = fopen(filename, "rb");
    if(f == NULL){
        if(err_code)
            *err_code = 2;
        return NULL;
    }

    int width, height;

    if(fread(&width, sizeof(int), 1, f)<=0){
        if(err_code)
            *err_code = 3;
        fclose(f);
        return NULL;
    }
    if(fread(&height, sizeof(int), 1, f)<=0){
        if(err_code)
            *err_code = 3;
        fclose(f);
        return NULL;
    }

    if(width < 1 || height < 1){
        if(err_code)
            *err_code = 3;
        fclose(f);
        return NULL;
    }
    struct matrix_t * result = matrix_create_struct(width, height);
    if(result == NULL){
        if(err_code)
            *err_code = 4;
        fclose(f);
        return NULL;
    }

    for(int i = 0 ; i < result->height ; i ++){
        for(int j = 0 ; j < result->width ; j++){
            int a=0;
            if(fread(&a, sizeof(int), 1, f)<=0){
                if(err_code)
                    *err_code=3;
                fclose(f);
                matrix_destroy_struct(&result);
                return NULL;
            }
            *(*(result->ptr+i)+j) = a;
        }
    }
    fclose(f);
    return result;
}

struct matrix_t* matrix_load_t(const char *filename, int *err_code){
    if(err_code)
        *err_code=0;
    if(filename==NULL){
        if(err_code)
            *err_code = 1;
        return NULL;
    }

    FILE * f = fopen(filename, "r");
    if(f == NULL){
        if(err_code)
            *err_code = 2;
        return NULL;
    }

    int width, height;

    if(fscanf(f, "%d",&width)!=1){
        if(err_code)
            *err_code = 3;
        fclose(f);
        return NULL;
    }
    if(fscanf(f,"%d",&height)!=1){
        if(err_code)
            *err_code = 3;
        fclose(f);
        return NULL;
    }

    if(width < 1 || height < 1){
        if(err_code)
            *err_code = 3;
        fclose(f);
        return NULL;
    }

    struct matrix_t * result = matrix_create_struct(width, height);
    if(result == NULL){
        if(err_code)
            *err_code = 4;
        fclose(f);
        return NULL;
    }

    for(int i = 0 ; i < result->height ; i ++){
        for(int j = 0 ; j < result->width ; j++){
            int a=0;
            if(fscanf(f,"%d",&a)!=1){
                if(err_code)
                    *err_code=3;
                fclose(f);
                matrix_destroy_struct(&result);
                return NULL;
            }
            *(*(result->ptr+i)+j) = a;
        }
    }
    fclose(f);
    return result;
}

matrix_utils.h


//
// Created by root on 6/26/21.
//

#ifndef PROJECT1_MATRIX_UTILS_H
#define PROJECT1_MATRIX_UTILS_H
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

struct matrix_t{
    int **ptr;
    int width;
    int height;
};

int matrix_create(struct matrix_t *m, int width, int height);
int matrix_read(struct matrix_t *m);
void matrix_display(const struct matrix_t *m);
void matrix_destroy(struct matrix_t *m);

struct matrix_t* matrix_create_struct(int width, int height);

void matrix_destroy_struct(struct matrix_t **m);

struct matrix_t* matrix_copy(const struct matrix_t *copy);

struct matrix_t* matrix_load_b(const char *filename, int *err_code);
struct matrix_t* matrix_load_t(const char *filename, int *err_code);

struct matrix_t* matrix_add(const struct matrix_t *m1, const struct matrix_t *m2);
struct matrix_t* matrix_subtract(const struct matrix_t *m1, const struct matrix_t *m2);
struct matrix_t* matrix_multiply(const struct matrix_t *m1, const struct matrix_t *m2);

#endif //PROJECT1_MATRIX_UTILS_H

