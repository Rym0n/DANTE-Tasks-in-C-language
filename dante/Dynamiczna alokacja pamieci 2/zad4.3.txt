Napisz program, który pobierze od użytkownika żądany rozmiar tablicy (szerokość i wysokość), a następnie wykorzystując przygotowaną funkcję zarezerwuje pamięć na tablicę.

W przypadku wprowadzenia przez użytkownika błędnych znaków program powinien wyświetlić komunikat incorrect input i zakończyć działanie z kodem błędu 1.

W przypadku podania przez użytkownika błędnych danych wejściowych program powinien wyświetlić komunikat incorrect input data i zakończyć działanie z kodem błędu 2.

Jeżeli nie powiedzie się przydział pamięci to program powinien wyświetlić komunikat Failed to allocate memory i zakończyć działanie z kodem błędu 8.

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "tested_declarations.h"
#include "rdebug.h"

void destroy_array_2d_2(int **ptr, int height) {
    if (ptr == NULL || height < 0) return;
    int i;
    for (i = 0; i < height; i++) {
        free(*(ptr + i));
    }
    free(ptr);
}

int **create_array_2d(int width, int height) {
    if (width < 1 || height < 1) {
        return NULL;
    }
    int **ptr = malloc(height * sizeof(int *));
    if (ptr == NULL) {
        return NULL;
    }
    int i;
    for (i = 0; i < height; i++) {
        *(ptr + i) = malloc(width * sizeof(int));
        if (*(ptr + i) == NULL) {
            destroy_array_2d_2(ptr, i);
            return NULL;
        }
    }
    return ptr;
}

void display_array_2d(int **ptr, int width, int height) {
    if (ptr == NULL || width < 1 || height < 1) {
        return;
    }
    int i, j;
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            printf("%d ", *(*(ptr + i) + j));
        }
        printf("\n");
    }
}

void destroy_array_2d(int ***ptr, int height) {
    if (height < 1 || ptr == NULL) {
        return;
    }
    destroy_array_2d_2(*ptr, height);
    *ptr = NULL;
}

int create_array_2d_2(int ***ptr, int width, int height) {
    if (ptr == NULL || width < 1 || height < 1) {
        return 1;
    }
    *ptr = create_array_2d(width, height);
    if (*ptr == NULL) {
        return 2;
    }
    return 0;
}

int sum_row(int *ptr, int width) {
    if (ptr == NULL || width < 1) {
        return -1;
    }
    int i, sum = 0;
    for (i = 0; i < width; i++) {
        sum += *(ptr + i);
    }
    return sum;
}

int sum_array_2d(int **ptr, int width, int height) {
    if (ptr == NULL || width < 1 || height < 1) {
        return -1;
    }
    int sum = 0;
    int i;
    for (i = 0; i < height; i++) {
        sum += sum_row(*(ptr + i), width);
    }
    return sum;
}

int main() {
    int **ptr;
    int height, width;
    printf("Podaj: ");
    if (scanf("%d %d", &width, &height) != 2) {
        printf("Incorrect input");
        return 1;
    }
    if (width < 1 || height < 1) {
        printf("incorrect input data");
        return 2;
    }
    int err = create_array_2d_2(&ptr, width, height);
    if (err == 2) {
        printf("Failed to allocate memory");
        return 8;
    }
    int i, j;
    printf("Podaj liczby: ");
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            if (scanf("%d", (*(ptr + i) + j)) != 1) {
                printf("incorrect input");
                destroy_array_2d(&ptr, height);
                return 1;
            }
        }
    }
    display_array_2d(ptr, width, height);
    for (i = 0; i < height; i++) {
        printf("%d\n", sum_row(*(ptr + i), width));
    }
    printf("%d\n", sum_array_2d(ptr, width, height));
    destroy_array_2d(&ptr, height);
    return 0;
}