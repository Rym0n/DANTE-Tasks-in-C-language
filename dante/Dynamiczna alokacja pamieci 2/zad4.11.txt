Zbiory liczb - statystyka og√≥lna

format_type.h

#ifndef UNTITLED_FORMAT_TYPE_H
#define UNTITLED_FORMAT_TYPE_H

enum save_format_t{
    fmt_binary,
    fmt_text
};

#endif //UNTITLED_FORMAT_TYPE_H


main.c
#include "format_type.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "tested_declarations.h"
#include "rdebug.h"


struct statistic_t
{
    int min;
    int max;
    float avg;
    float standard_deviation;
    int range;
};


int statistics(int **ptr, struct statistic_t **stats);
void display(int **ptr);
int save(const char *filename, int **ptr, enum save_format_t format);



int main(void) {
    int A[] = {10, 20, 30, 40, 50, 60, 70, -1};
    int B[] = {100, 200, 300, 400, 500, 600, 700, 800, -1};
    int C[] = {1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, -1};
    int* D[] = {A, B, C, NULL};
    display(D);
    char *access=(char*)malloc(40 * sizeof(char));
    if(access == NULL)
        return printf("Failed to allocate memory"), 8;

    printf("filename:");
    fgets(access, 40, stdin);
    if(strlen(access) > 39) while(getchar() != '\n');
    if(*(access + strlen(access) - 1) == '\n') *(access + strlen(access) - 1)='\0';
    char *txt=(char*)malloc(44*sizeof(char));
    if(txt==NULL)
        return printf("Failed to allocate memory"), free(access),8;
    char *bin=(char*)malloc(44*sizeof(char));
    if(bin==NULL)
        return free(txt), free(access), printf("Failed to allocate memory"), 8;
    strcpy(txt, access);
    strcpy(bin, access);
    strcat(txt,".txt");
    strcat(bin,".bin");
    if(save(txt,D,fmt_text)!=0)
        printf("Couldn't create file\n");
    else
        printf("File saved\n");
    if(save(bin,D,fmt_binary)!=0)
        printf("Couldn't create file\n");
    else
        printf("File saved\n");
    struct statistic_t *stats;
    if(statistics(D,&stats) == 2){
        free(txt);
        free(bin);
        free(access);
        printf("Failed to allocate memory");
        return 8;
    }
    printf("%d\n%d\n%d\n%f\n%f",(*stats).min,(*stats).max,(*stats).range,stats->avg, (*stats).standard_deviation);
    free(txt);
    free(bin);
    free(access);
    free(stats);
    return 0;
}


int statistics(int **ptr, struct statistic_t **stats){
    if(ptr==NULL || stats==NULL)
        return 1;

    *stats = (struct statistic_t*)calloc(1, sizeof(struct statistic_t));
    if(*stats==NULL)
        return 2;

    if(*ptr==NULL)
        return free(*stats), 3;

    int min = *(*(ptr));
    int max = *(*(ptr));
    int sum = 0;
    int count = 0;
    for(int i = 0 ; *(ptr+i)!=NULL ; i++){
        for(int j = 0 ; *(*(ptr+i)+j)!=-1 ; j++){
            if(*(*(ptr+i)+j)>max)
                max = *(*(ptr+i)+j);
            if(*(*(ptr+i)+j)< min)
                min = *(*(ptr+i)+j);
            sum+=*(*(ptr+i)+j);
            count++;
        }
    }
    if(count==0)
        return free(*stats), 3;
    (*stats)->max = max;
    (*stats)->min = min;
    (*stats)->avg = sum/(float)count;
    (*stats)->range = max - min;
    float std=0;
    for(int i = 0 ; *(ptr+i)!=NULL ; i++){
        for(int j = 0 ; *(*(ptr+i)+j)!=-1 ; j++){
            int a = *(*(ptr+i)+j);
            float b = a - (*stats)->avg;
            std+= pow((double)b,2);
        }
    }
    std = std / count;
    (*stats)->standard_deviation = sqrt(std);
    return 0;
}

void display(int **ptr){
    if(ptr==NULL)
        return;

    for(int i = 0 ; *(ptr+i)!=NULL ; i++){
        for(int j = 0 ; *(*(ptr+i)+j)!=-1 ; j++){
            printf("%d ", *(*(ptr+i)+j));
        }
        printf("\n");
    }
    return;
}


int save(const char *filename, int **ptr, enum save_format_t format) {
    if(!filename || !ptr || (format!=fmt_text && format!=fmt_binary))
        return 1;
    FILE *f;
    if(format==fmt_text) {
        if((f=fopen(filename,"w"))==NULL)
            return 2;
        for(int i = 0 ; *(ptr+i)!=NULL ; i++) {
            for(int j = 0 ; *(*(ptr+i)+j)!=-1 ; j++) {
                fprintf(f,"%d ",*(*(ptr+i)+j));
            }
            fprintf(f,"%d\n",-1);
        }
    }
    else{
        if((f=fopen(filename,"wb"))==NULL)
            return 2;
        for(int i=0 ; *(ptr+i)!=NULL ; i++) {
            int j = 0 ;
            while(1){
                if(*(*(ptr+i)+j)==-1) {
                    fwrite((*(ptr+i)+j),sizeof(int),1,f);
                    break;
                }
                fwrite((*(ptr+i)+j),sizeof(int), 1, f);
                j++;
            }
        }
    }
    fclose(f);
    return 0;
}